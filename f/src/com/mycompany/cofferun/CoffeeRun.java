package com.mycompany.cofferun;

import com.codename1.io.Log;
import com.codename1.ui.Button;
import com.codename1.ui.Display;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;
import java.io.IOException;
import com.codename1.ui.Toolbar;
import com.codename1.ui.Button;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.Image;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.Toolbar;
import java.io.IOException;


import static com.codename1.ui.CN.*;
import com.codename1.components.InteractionDialog;
import com.codename1.components.ToastBar;
//import com.codename1.googlemaps.MapContainer;
import com.codename1.location.Location;
import com.codename1.location.LocationListener;
import com.codename1.location.LocationManager;
import com.codename1.maps.Coord;
import com.codename1.ui.*;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.geom.Rectangle;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;

import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;

import com.codename1.io.*;
import com.codename1.ui.*;
import com.codename1.ui.layouts.*;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

import com.codename1.xml.Element;
import com.codename1.xml.XMLParser;

import com.codename1.ui.*;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;

import com.codename1.ui.layouts.GridLayout;

import java.util.ArrayList;
import java.util.Map;


import com.codename1.ui.Container;
import com.codename1.ui.TextField;


import java.util.*;

import com.codename1.ui.*;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.*;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;

import com.codename1.io.Log;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Label;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;

import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.NetworkManager;
import com.codename1.l10n.SimpleDateFormat;
import com.codename1.ui.*;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.plaf.UIManager;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.Map;


import com.codename1.facebook.FaceBookAccess;
import com.codename1.io.*;

import com.codename1.social.Login;
import com.codename1.ui.*;
import com.codename1.ui.Button;
import com.codename1.ui.Container;
import com.codename1.ui.Dialog;
import com.codename1.ui.Graphics;
import com.codename1.ui.Image;
import com.codename1.ui.Label;
import com.codename1.ui.List;
import com.codename1.ui.TextField;
import com.codename1.ui.layouts.*;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;



import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

import com.codename1.xml.Element;
import com.codename1.xml.XMLParser;
import java.io.IOException;

import coffeerunapp2.activities;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class CoffeeRun {

    public Form current, hi, slotmaker, chatform, runmaker, personalizerun, moneytransferform;
    private Container mainpanel;
    private Button addrunbutton, confirmslot, chatstarter, paymoney, transfergo;
    private Resources theme;
    public User user1;
    public int runcounter;
    //  public Button but1, but2, but3, but4, but5, but6, but7, but8, but9, but10;
//   public Button slotbuttons[];
    public TextField slotname, slotcost, transferamount;
    public AutoCompleteTextField slotorder, friendsnames;
    //  public Map<String, String> items;
    public ArrayList <Message> mymessages;
    public ArrayList finalnamespublic;
    public int idcounter;
    public String runID;
    private final String HTML_API_KEY = "AIzaSyCXyFewPbDk4wUCJu6_83NkxxB0qpk_QQQ";
    private double Lat =0.0;
    private double Long =0.0;


    //add two images, bubblemeimage and bubbleyouimage

    public Image bubblemeimage, bubbleyouimage;
    private JSONParser json = new JSONParser();





    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
    }

    public void start() {
        if(current != null){
            current.show();
            return;
        }






        Form wellthen = new Form("coolio",new BorderLayout());

        wellthen.add(forgodsake());
        wellthen.show();
    }

    public Form forgodsake(){
        hi = new Form( new BorderLayout());



        try {

            bubblemeimage = Image.createImage("/bubbleme.png");
            bubbleyouimage = Image.createImage("/bubbleyou.png");
        } catch (IOException e) {
            e.printStackTrace();
        }


        mymessages = new ArrayList<Message>();
        finalnamespublic = new ArrayList();



        GPSTracking();




        user1 = new User ("Lyndsey Mugford", 1);

        // slotmaker = new Form("Claim Your Slot", new GridLayout(4,1));
        mainpanel=new Container();
        mainpanel.setLayout(new GridLayout(3, 1));


        addrunbutton = new Button("Make Run");
        //    slotname = new TextField("Name");
        //  slotcost = new TextField("0");
        //   slotorder = new TextField("order");
        //  confirmslot = new Button ("Enter");

        // runpanel=new Container();





        mainpanel.add(addrunbutton);
        chatstarter=new Button("Chat");
        chatstarter.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {



                chat();
                System.out.println("chat!");

                //HERE IS THE WIKIPEDIA
            }
        });

        addrunbutton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {



                makearun("1234567", "", true, 5);

                //HERE IS THE WIKIPEDIA
            }
        });

        paymoney = new Button("Zomato");
        paymoney.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {



                zomatofindrestaurants();

                //HERE IS THE WIKIPEDIA
            }
        });

        mainpanel.add(paymoney);
        mainpanel.add(chatstarter);

        hi.addComponent(BorderLayout.CENTER, mainpanel);
        return(hi);

    }
    public void GPSTracking()
    {

        try {
            Lat=Display.getInstance().getLocationManager().getCurrentLocation().getLatitude();
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            Long=Display.getInstance().getLocationManager().getCurrentLocation().getLatitude();
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(Lat+","+Long);

    }
    public void zomatofindrestaurants ()
    {
        ConnectionRequest req=new ConnectionRequest();
        String newinput = "https://developers.zomato.com/api/v2.1/search?&apikey=d2d7226882b2260ec9862dbe3d8201fa&lat="+Lat+"&lon="+Long+"&sort=real_distance";
        System.out.println(newinput);

        req.setUrl(newinput);

        req.setPost(false);
        // req.addRequestHeader("numSlots","4");
        //req.addRequestHeader("privacy", "false");
        // req.addRequestHeader("destination","Starbucks");
        //string key, string value?
        req.setHttpMethod("GET");
        NetworkManager.getInstance().addToQueueAndWait(req);
        JSONParser parser=new JSONParser();
        try {
            Hashtable result =parser.parse(new InputStreamReader(new ByteArrayInputStream(req.getResponseData())));
            System.out.println("test"+result);
            System.out.println(parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData()))));
            Map response=parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData())));
            System.out.println( "hope"+response.get("restaurants"));


            ArrayList restaurantlist = (ArrayList) response.get("restaurants");
            System.out.println(response.size());
            ArrayList geoartistlist = new ArrayList();
            ArrayList finalnames = new ArrayList();


            for (int x = 0; x < restaurantlist.size(); x++) {
                Map<String, Object> map = (Map<String, Object>) restaurantlist.get(x);
                System.out.println(map.get("restaurant"));
                geoartistlist.add(map.get("restaurant"));
            }

            for (int x = 0; x < geoartistlist.size(); x++) {
                Map<String, Object> map = (Map<String, Object>) geoartistlist.get(x);
                System.out.println(map.get("name"));
                finalnames.add(map.get("name"));
            }

            for (int x = 0; x < finalnames.size(); x++){
                finalnamespublic.add(finalnames.get(x));
            }









        } catch (IOException e) {
            e.printStackTrace();
        }
        //return (null);
    }
    public void stop() {
        current = Display.getInstance().getCurrent();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }

    public void addtobalance(double addition, int usernumber)
    {
        System.out.println("worked");

    }

    protected void setBackCommand(Form f, Form k) {
        Command back = new Command("") {

            @Override
            public void actionPerformed(ActionEvent evt) {k.showBack();
            }

        };
        Image img = FontImage.createMaterial(FontImage.MATERIAL_ARROW_BACK, UIManager.getInstance().getComponentStyle("TitleCommand"));
        back.setIcon(img);
        f.getToolbar().addCommandToLeftBar(back);
        f.getToolbar().setTitleCentered(true);
        f.setBackCommand(back);
    }
    public void chat()
    {
        //download bouncycastle and pubnub libraries

        chatform = new Form("Chat", new BorderLayout());
        Container chatcontainer = new Container ();
        chatcontainer.setLayout(new GridLayout(8,1));


        TextField mytext = new TextField();
        mytext.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {

                Message currentmessage = new Message (mytext.getText(), true);
                mytext.clear();

                mymessages.add(currentmessage);
                Message currentresponse= new Message("Response", false);
                mymessages.add(currentresponse);

                System.out.println(mymessages.size());
                chatcontainer.removeAll();
                for (int j=mymessages.size()-8;j<mymessages.size();j++)
                {
                    if (mymessages.size()>j&&j>=0) {
                        // Label chatlabel = new Label(mymessages.get(j).messagestring);

                        if (mymessages.get(j).messagestring=="Response") {
                            Label youtextimage = new Label("PIC") {
                                public void paint(Graphics g) {


                                    g.drawImage(bubbleyouimage, this.getX(), this.getY(), this.getWidth(), this.getHeight());
                                    g.setColor(000000);
                                    g.drawString("Response", getX(), getY());

                                }
                            };
                            chatcontainer.addComponent(youtextimage);
                        }

                        else {
                            int k = j;

                            Label textimage = new Label("PIC") {
                                public void paint(Graphics g) {


                                    g.drawImage(bubblemeimage, this.getX(), this.getY(), this.getWidth(), this.getHeight());
                                    g.setColor(000000);
                                    g.drawString(mymessages.get(k).messagestring, getX(), getY());

                                }
                            };

                            chatcontainer.addComponent(textimage);
                        }


                    }
                    else
                    {
                        //System.out.println("j is:"+j);
                    }


                }

            }
        });

        chatform.addComponent (BorderLayout.SOUTH,mytext);
        chatform.addComponent (BorderLayout.CENTER,chatcontainer);
        setBackCommand(chatform, hi);

        chatform.show();


    }//end of chat method

    public void ReadJsonAddRun(String inputUrl, int slotcount, boolean privacyj, String destinationj) {
        ConnectionRequest req=new ConnectionRequest();
        System.out.println(destinationj);
        System.out.println(privacyj);
        String newinput = inputUrl+"?numSlots="+slotcount+"&privacy="+privacyj+"&destination="+destinationj;
        System.out.println(newinput);

        req.setUrl(newinput);

        req.setPost(false);
        // req.addRequestHeader("numSlots","4");
        //req.addRequestHeader("privacy", "false");
        // req.addRequestHeader("destination","Starbucks");
        //string key, string value?
        req.setHttpMethod("GET");
        NetworkManager.getInstance().addToQueueAndWait(req);
    /*   JSONParser parser=new JSONParser();
       try {
           Hashtable result =parser.parse(new InputStreamReader(new ByteArrayInputStream(req.getResponseData())));
           System.out.println("test"+result);
           System.out.println(parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData()))));
           Map response=parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData())));
           System.out.println( "hope"+response.get("result"));


           LinkedHashMap allItems = new LinkedHashMap();
           allItems=(LinkedHashMap)response.get("result");

       } catch (IOException e) {
           e.printStackTrace();
       }
       //return (null);*/
    }
    public void ReadJsonClaimSlot(String inputUrl, String runidj, String useridj, String items) {

        String idstring = String.valueOf(runidj);

        ConnectionRequest req=new ConnectionRequest();
        System.out.println("Is it 2heen?:"+ runidj);

        String newinput = inputUrl+"?runId="+idstring+"&userId="+useridj+"&items="+items;
        System.out.println(newinput);

        req.setUrl(newinput);

        req.setPost(false);
        // req.addRequestHeader("numSlots","4");
        //req.addRequestHeader("privacy", "false");
        // req.addRequestHeader("destination","Starbucks");
        //string key, string value?
        req.setHttpMethod("GET");
        NetworkManager.getInstance().addToQueueAndWait(req);
        JSONParser parser=new JSONParser();
        try {
            Hashtable result =parser.parse(new InputStreamReader(new ByteArrayInputStream(req.getResponseData())));
            System.out.println("test"+result);
            System.out.println(parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData()))));
            Map response=parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData())));
            System.out.println( "hope"+response.get("result"));


            LinkedHashMap allItems = new LinkedHashMap();
            allItems=(LinkedHashMap)response.get("result");

        } catch (IOException e) {
            e.printStackTrace();
        }
        //return (null);
    }
    public void ReadJsonGetRuns(String inputUrl) {
        ConnectionRequest req=new ConnectionRequest();

        req.setUrl(inputUrl);

        req.setPost(false);

        //string key, string value?
        req.setHttpMethod("GET");
        NetworkManager.getInstance().addToQueueAndWait(req);
        JSONParser parser=new JSONParser();
        try {
            Hashtable result =parser.parse(new InputStreamReader(new ByteArrayInputStream(req.getResponseData())));
            System.out.println("test"+result);
            System.out.println(parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData()))));
            Map response= parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData())));
            System.out.println("!!!!!!!"+response.get("112wg7njrfec0n5"));
            runID="112wg7njrfec0n5";


            //   ArrayList <String> myarraylist = new ArrayList<String>();

            //   for (int x=0;x<response.size();x++)
            //  {
            //      myarraylist.add(response)
            //  }

            //  for ( key : response.keySet()){



            //    }

            Map <String, Object> allItems = (Map<String, Object>) response;
            System.out.println(allItems.get("runId"));


        } catch (IOException e) {
            e.printStackTrace();
        }
        //return (null);
    }

    public void moneytransfer()
    {
        moneytransferform = new Form("Transfer Money", new GridLayout(3,1));
        friendsnames=new AutoCompleteTextField("Bob", "Jill", "Joe");
        transfergo=new Button("make transfer");
        transferamount=new TextField("transfer amount");
        moneytransferform.addComponent(friendsnames);
        moneytransferform.addComponent(transferamount);
        moneytransferform.addComponent(transfergo);

        setBackCommand(moneytransferform, hi);

        moneytransferform.show();


        transfergo.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {

                double transferdouble = Double.valueOf(transferamount.getText());

                addtobalance(transferdouble, 1);

            }
        });
    }

    public void makearun(String runID, String restaurantpulled, boolean New, int slotint)
    {
        System.out.println("make a run");

        Run currentrun= new Run (runID, 20, true, true, "");
        System.out.println("!!!!!!!!!" + currentrun.slots);


        Container runpanel = new Container();
        runpanel.setLayout(new GridLayout(currentrun.slots, 1));
        currentrun.restaurant=restaurantpulled;
        ////PLACEHOLDER!!!!
        currentrun.slots=slotint;



        runmaker = new Form(currentrun.restaurant+ " Run", new GridLayout(currentrun.slots,1));



        for (int j=0;j<currentrun.slots;j++)
        {

            currentrun.FillSlot(j, "name", "order", 0);
            System.out.println("bam");
            //runmaker.add(slotbuttons[j]);

            // ActivateSlotButton(j, currentrun);


        }




        if (New==true) {
            PersonalizeRunMaker(currentrun);
        }
        else{
            Makerunmaker(currentrun);
            runmaker.show();
            setBackCommand(runmaker,personalizerun);
        }


        //Makerunmaker(currentrun, 4, true, false, "Bob's store");




        //  }
        //hi.removeComponent(mainpanel);
        //hi.addComponent(BorderLayout.CENTER, runpanel);






    }

    public void PersonalizeRunMaker (Run currentrun)
    {
        Container tf = new Container ();
        tf.setLayout(new GridLayout(1,2));

        zomatofindrestaurants();


        personalizerun= new Form ("Personalize Run", new GridLayout(4,1));
        // AutoCompleteTextField restaurantpicker = new AutoCompleteTextField("Starbucks", "Dunkin Donuts");
        final String[] namestrings= new String[finalnamespublic.size()];
        // snipped the rest for clarity


        for (int x=0;x<finalnamespublic.size();x++) {
            System.out.println(finalnamespublic.get(x));
            //  namesstrings.add(stringholder);
            namestrings[x]=(String) finalnamespublic.get(x);

        }



        AutoCompleteTextField restaurantpicker = new AutoCompleteTextField(namestrings);

        restaurantpicker.setMinimumElementsShownInPopup(5);
       /*for (int x=0;x<finalnamespublic.size();x++) {

           restaurantpicker.addItem((String)finalnamespublic.get(x));
       }*/





        RadioButton openbutton = new RadioButton ("open run");
        RadioButton closedbutton = new RadioButton ("closed run");
        new ButtonGroup (openbutton,closedbutton);
        openbutton.setSelected(true);

        RadioButton charge = new RadioButton ("add tip");
        RadioButton chargeless = new RadioButton ("no tip");
        new ButtonGroup(charge,chargeless);
        chargeless.setSelected(true);

        Button go = new Button ("Go");



        TextField setslots = new TextField ("size");


        tf.add(openbutton).add(closedbutton);
        tf.add(charge).add(chargeless);


        personalizerun.addComponent(restaurantpicker);
        personalizerun.addComponent(tf);
        personalizerun.addComponent(setslots);
        personalizerun.addComponent(go);



        go.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {

                double slotsizedouble = Double.valueOf(setslots.getText());
                int slotsize = (int)slotsizedouble;

                currentrun.slots=slotsize;
                currentrun.open=true;
                currentrun.charge=false;
                currentrun.restaurant=restaurantpicker.getText();

                System.out.println("current run slots: " +currentrun.slots);

                ReadJsonAddRun("https://crippin-coffee.herokuapp.com/addRun",slotsize,false,currentrun.restaurant);
                //  ReadJsonGetRuns("https://crippin-coffee.herokuapp.com/getDocked");
                Makerunmaker(currentrun);
                runmaker.show();
                setBackCommand(runmaker,personalizerun);

            }

        });


        personalizerun.show();
        setBackCommand(personalizerun, hi);


    }

    public void Makerunmaker(Run currentrun)
    {
        Button slotbuttons[] = new Button[10];
        runmaker = new Form(currentrun.restaurant +" Run", new GridLayout(currentrun.slots,1));
        for(int s=0; s<currentrun.slotlist.size(); s++)
        {

            slotbuttons[s] = new Button(currentrun.slotlist.get(s).name);


        }


        for (int j=0;j<currentrun.slots;j++)
        {

            //currentrun.FillSlot(j, "name", "order", 0);

            runmaker.add(slotbuttons[j]);

            // ActivateSlotButton(j, currentrun);


        }
        for (int j=0;j<currentrun.slots;j++) {

            int jj=j;
            slotbuttons[jj].addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent evt) {
                    PersonalizeSlot(jj, currentrun, slotbuttons);
                    //  System.out.println("hit 0");
                }

            });
        }
        //hi.removeComponent(mainpanel);
        //hi.addComponent(BorderLayout.CENTER, runpanel);
        runmaker.show();


    }


 /*  public void ActivateSlotButton(int jj, Run thisrun)
   {
       //thisrun.FillSlot(jj, "Lyndsey", "coffee", 2.99);
       slotbuttons[jj].addActionListener(new ActionListener() {

           @Override
           public void actionPerformed(ActionEvent evt) {
               PersonalizeSlot(jj, thisrun);
               //System.out.println(thisrun.slotlist.size());


           }
       });
   }*/


    public void PersonalizeSlot(int j, Run currentrun, Button newslotbuttons[])
    {
        Map<String, String> items = new HashMap<String, String>();
        slotmaker = new Form("Claim Your Slot", new GridLayout(4,1));

        slotname = new TextField("Name");
        slotcost = new TextField("0");

        items.put("Coffee","3.45");
        items.put("Bread","2.00");
        items.put("Jam","8.43");
        items.put("","0.00");


        ComboBox <String> dropdownorder = new ComboBox<>();



        dropdownorder.addItem("Coffee");
        dropdownorder.addItem("bread");
        dropdownorder.addItem("jam");




        slotorder = new AutoCompleteTextField("Coffee", "Jam", "Croissant", "Caramel Latte", "Muffin", "Bread", "Tea", "Green tea", "iced tea", "iced coffee", "mocha");

        slotorder.setMinimumElementsShownInPopup(5);

        confirmslot = new Button ("Enter");


        slotmaker.addComponent(slotname);
        slotmaker.addComponent(slotorder);
        slotmaker.addComponent(slotcost);
        //  slotmaker.addComponent(dropdownorder);
        slotorder.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {


                slotcost.setText(items.get(slotorder.getText()));

            }

        });





        slotmaker.addComponent(confirmslot);



        confirmslot.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {





                //  System.out.println("J is: " + j);
                System.out.println(slotcost.getText());
                double costj = Double.valueOf(slotcost.getText());
                currentrun.slotlist.get(j).name=slotname.getText();
                currentrun.slotlist.get(j).order=slotorder.getText();
                currentrun.slotlist.get(j).cost=costj;
                ReadJsonClaimSlot("https://crippin-coffee.herokuapp.com/claimSpot",currentrun.ID,"000000",currentrun.slotlist.get(j).order);
                System.out.println("set stuff");
                // System.out.println(currentrun.slotlist.size());
                //String displaystring = ""+currentrun.slotlist.get((j)).name + ", " + currentrun.slotlist.get((j)).order + ": "+currentrun.slotlist.get((j)).cost;
                //  System.out.println(displaystring);
                newslotbuttons[j].setText(""+currentrun.slotlist.get((j)).name + ", " + currentrun.slotlist.get((j)).order + ": "+currentrun.slotlist.get((j)).cost);

                Makerunmaker(currentrun);
                for (int k=0;k<currentrun.slotlist.size();k++)
                {
                    //System.out.print(currentrun.slotlist.get(k).name);
                }
                System.out.println("");
                activities activites2 = new activities();
                activites2.alyssaform();
                //coffeerun2.addtobalance(4.5, 2);
                // String runIDtempstring = availibleRuns.get(j).runId;
                // int runidint = Integer.valueOf (runIDtempstring);
                // System.out.println(runidint);
                // coffeerun2.makearun(runIDtempstring, availibleRuns.get(j).destination, false);
                //slotname.setText("name");
                // slotorder.setText("order");
                // slotcost.setText("0");


            }

        });


        slotmaker.show();


        for (int p=0;p<currentrun.slots;p++)
        {

            // currentrun.FillSlot(j, "name", "order", 0);
            // runpanel.add(slotbuttons[j]);
            newslotbuttons[p].setText(""+currentrun.slotlist.get(p).name+ ", " + currentrun.slotlist.get((j)).order + ": "+currentrun.slotlist.get((j)).cost);

            // ActivateSlotButton(j, currentrun);


        }
        System.out.println("");
    }


    public void destroy() {
    }

}

